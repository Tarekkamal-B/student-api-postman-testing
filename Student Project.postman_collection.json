{
	"info": {
		"_postman_id": "a3942b52-4170-41b6-a92c-163894361544",
		"name": "Student Project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41018466"
	},
	"item": [
		{
			"name": "Get one Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// test status code of the response\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// if status code possible be one of many options\r",
							"pm.test(\"Succsessfull Get requesgt\", () => {\r",
							"    pm.expect(pm.response.code).to.have.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"// validate the content-type is present in Headers\r",
							"pm.test(\"content-type is present\", ()=> {\r",
							"    pm.response.to.have.header(\"content-type\");\r",
							"});\r",
							"\r",
							"\r",
							"// validate the content-type format\r",
							"pm.test(\"content-Type header is application/json\", ()=> {\r",
							"    \r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"// global varibles for json data coming with response\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"//validate json file data types\r",
							"pm.test(\"Test data type of the response\", ()=> {\r",
							"    pm.expect(jsonData).is.be.an(\"object\");\r",
							"    pm.expect(jsonData.id).is.be.a(\"string\");\r",
							"    pm.expect(jsonData.name).is.be.a(\"string\");\r",
							"    pm.expect(jsonData.age).is.be.a(\"number\");\r",
							"    pm.expect(jsonData.grade).is.be.a(\"string\");\r",
							"    pm.expect(jsonData.subjects).is.be.an(\"array\");\r",
							"\r",
							"})\r",
							"\r",
							"// validate array proprites\r",
							"pm.test(\"validate array proprites\", ()=>{\r",
							"    // validate existing index in the array\r",
							"    pm.expect(jsonData.subjects).to.include(\"Math\");\r",
							"    // validate all array's members\r",
							"    pm.expect(jsonData.subjects).to.have.members([\"Math\", \"Physics\",\"English\"]);\r",
							"})\r",
							"\r",
							"//validate sutdent data \r",
							"pm.test(\"validate value of student fields in response\", ()=>{\r",
							"    pm.expect(jsonData.id).to.eql(\"1\");\r",
							"    pm.expect(jsonData.name).to.eql(\"John Doe\");\r",
							"    pm.expect(jsonData.age).to.eql(18);\r",
							"    pm.expect(jsonData.grade).to.eql(\"12th\");\r",
							"\r",
							"})\r",
							"\r",
							"//json schema validation\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"grade\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"subjects\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"age\",\r",
							"    \"grade\",\r",
							"    \"subjects\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"validate json schema\", ()=>{\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"    // tv4 is tiny validator vestion 4 , and its a library.\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Students",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 200\", ()=> {\r",
							"\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"content-type is present in Headers\", ()=>{\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"})\r",
							"\r",
							"pm.test(\"Content-Type is 'application/json'\", ()=>{\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.be.eql(\"application/json\")\r",
							"})\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"json file data types in the respone\",()=>{\r",
							"    pm.expect(jsonData).is.be.an(\"array\");\r",
							"\r",
							"     jsonData.forEach((item, index) => {\r",
							"        pm.expect(item).to.be.an(\"object\");\r",
							"        pm.expect(item.id, `id at index ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(item.name, `name at index ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(item.age, `age at index ${index}`).to.be.a(\"number\");\r",
							"        pm.expect(item.grade, `grade at index ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(item.subjects, `subjects at index ${index}`).to.be.an(\"array\");\r",
							"    });\r",
							"});\r",
							"\r",
							"let schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"grade\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"subjects\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"age\",\r",
							"        \"grade\",\r",
							"        \"subjects\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"grade\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"subjects\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"age\",\r",
							"        \"grade\",\r",
							"        \"subjects\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"grade\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"subjects\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"string\"\r",
							"            }\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"name\",\r",
							"        \"age\",\r",
							"        \"grade\",\r",
							"        \"subjects\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"};\r",
							"pm.test(\"json file is following json schema\", ()=>{\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 201\", ()=>{\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test(\"content-type is present\", ()=> {\r",
							"    pm.response.to.have.header(\"content-type\");\r",
							"});\r",
							"\r",
							"\r",
							"// validate the content-type format\r",
							"pm.test(\"content-Type header is application/json\", ()=> {\r",
							"    \r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=> {\r",
							"    pm.expect(jsonData).is.be.an(\"object\");\r",
							"    pm.expect(jsonData.id).is.be.a(\"string\");\r",
							"    pm.expect(jsonData.name).is.be.a(\"string\");\r",
							"    pm.expect(jsonData.age).is.be.a(\"number\");\r",
							"    pm.expect(jsonData.grade).is.be.a(\"string\");\r",
							"    pm.expect(jsonData.subjects).is.be.an(\"array\");\r",
							"\r",
							"})\r",
							"\r",
							"// validate array proprites\r",
							"pm.test(\"validate array proprites\", ()=>{\r",
							"    // validate existing index in the array\r",
							"    pm.expect(jsonData.subjects).to.include(\"Cypress\");\r",
							"    // validate all array's members\r",
							"    pm.expect(jsonData.subjects).to.have.members([\"C++\",\"Cypress\",\"API Testing\"]);\r",
							"})\r",
							"\r",
							"//validate sutdent data \r",
							"pm.test(\"validate value of student fields in response\", ()=>{\r",
							"    pm.expect(jsonData.id).to.eql(\"4\");\r",
							"    pm.expect(jsonData.name).to.eql(\"Tarek Kamal\");\r",
							"    pm.expect(jsonData.age).to.eql(27);\r",
							"    pm.expect(jsonData.grade).to.eql(\"4.8\");\r",
							"\r",
							"})\r",
							"\r",
							"//json schema validation\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"grade\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"subjects\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"age\",\r",
							"    \"grade\",\r",
							"    \"subjects\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"validate json schema\", ()=>{\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"    // tv4 is tiny validator vestion 4 , and its a library.\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n        \"id\": \"4\",\r\n        \"name\": \"Tarek Kamal\",\r\n        \"age\": 27,\r\n        \"grade\": \"4.8\",\r\n        \"subjects\": [\r\n            \"C++\",\r\n            \"Cypress\",\r\n            \"API Testing\"\r\n        ]\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 201\", ()=>{\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"content-type is present\", ()=> {\r",
							"    pm.response.to.have.header(\"content-type\");\r",
							"});\r",
							"\r",
							"\r",
							"// validate the content-type format\r",
							"pm.test(\"content-Type header is application/json\", ()=> {\r",
							"    \r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Test data type of the response\", ()=> {\r",
							"    pm.expect(jsonData).is.be.an(\"object\");\r",
							"    pm.expect(jsonData.id).is.be.a(\"string\");\r",
							"    pm.expect(jsonData.name).is.be.a(\"string\");\r",
							"    pm.expect(jsonData.age).is.be.a(\"number\");\r",
							"    pm.expect(jsonData.grade).is.be.a(\"string\");\r",
							"    pm.expect(jsonData.subjects).is.be.an(\"array\");\r",
							"\r",
							"})\r",
							"\r",
							"// validate array proprites\r",
							"pm.test(\"validate array proprites\", ()=>{\r",
							"    // validate existing index in the array\r",
							"    pm.expect(jsonData.subjects).to.include(\"MAth\");\r",
							"    // validate all array's members\r",
							"    pm.expect(jsonData.subjects).to.have.members([\"Electronics\",\"MAth\",\"Microwave\"]);\r",
							"})\r",
							"\r",
							"//validate sutdent data \r",
							"pm.test(\"validate value of student fields in response\", ()=>{\r",
							"    pm.expect(jsonData.id).to.eql(\"4\");\r",
							"    pm.expect(jsonData.name).to.eql(\"Tarek Kamal\");\r",
							"    pm.expect(jsonData.age).to.eql(27);\r",
							"    pm.expect(jsonData.grade).to.eql(\"4.8\");\r",
							"\r",
							"})\r",
							"\r",
							"//json schema validation\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"grade\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"subjects\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"name\",\r",
							"    \"age\",\r",
							"    \"grade\",\r",
							"    \"subjects\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"validate json schema\", ()=>{\r",
							"    pm.expect(tv4.validate(jsonData,schema)).to.be.true;\r",
							"    // tv4 is tiny validator vestion 4 , and its a library.\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": " {\r\n        \"id\": 4,\r\n        \"name\": \"Tarek Kamal\",\r\n        \"age\": 27,\r\n        \"grade\": \"4.8\",\r\n        \"subjects\": [\r\n            \"Electronics\",\r\n            \"MAth\",\r\n            \"Microwave\"\r\n        ]\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"status code is 204\",()=>{\r",
							"    pm.response.to.have.oneOf([200,204]);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"4"
					]
				}
			},
			"response": []
		}
	]
}